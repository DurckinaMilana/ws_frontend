(()=>{"use strict";var e,r,t={991:(e,r,t)=>{t(177),new class{constructor(e){this.container=document.querySelector("body"),this.url=e,this.users=[],this.yourUser=null,this.ws=new WebSocket(this.url)}init(){this.formAutorization(),this.ws.addEventListener("open",(()=>{console.log("connected")})),this.ws.addEventListener("message",(e=>{const r=JSON.parse(e.data);"error"===r.type?alert("Данный псевдоним занят. Выберите другой, пожалуйста."):"autorized"===r.type||"users"===r.type?(this.users=r.data,this.container.removeChild(this.container.firstChild),this.showChat()):"postMessage"===r.type&&this.showMessage(r.data)})),this.ws.addEventListener("close",(e=>{console.log("connection closed",e)})),this.ws.addEventListener("error",(()=>{console.log("error")})),window.addEventListener("beforeunload",(()=>{this.ws.send(JSON.stringify({type:"deleteUser",user:this.yourUser}))}))}formAutorization(){const e=document.createElement("form");e.classList.add("autorization"),e.innerHTML='<h4>Выберите псевдоним</h4>\n        <input class="input" type="text" required>\n        <button type="submit" class="btn">Продолжить</button>',this.container.insertAdjacentElement("afterbegin",e),e.addEventListener("submit",(r=>{r.preventDefault(),this.yourUser=e.querySelector("input").value;const t={type:"autorization",name:this.yourUser};this.ws.send(JSON.stringify(t))}))}showChat(){const e=document.createElement("form");e.classList.add("form-chat"),e.innerHTML='<div class="users"></div>\n        <div class="chat">\n          <div class="form-message"></div>\n          <input class="input-chat" type="text" placeholder="Type your message here" required>\n        </div>',this.container.insertAdjacentElement("afterbegin",e);const r=e.querySelector(".users");this.users.forEach((e=>{const t=document.createElement("li");t.classList.add("user"),t.textContent=e.name,e.name===this.yourUser&&(t.textContent="You"),r.insertAdjacentElement("beforeend",t)}));const t=e.querySelector(".input-chat");e.addEventListener("submit",(e=>{e.preventDefault();const r=t.value,n=this.dateToString(),o={type:"postMessage",data:{name:this.yourUser,context:r,time:n}};this.ws.send(JSON.stringify(o)),t.value=""}))}dateToString(){return(new Date).toLocaleString("ru-Ru",{year:"2-digit",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"}).replace(/[,%]/g,"")}showMessage(e){const r=document.createElement("div");r.classList.add("message");const{name:t,time:n,context:o}=e.data;r.innerHTML=`\n        <div class="data-user">\n          <span class="user-name">${t}</span>\n          <span>${n}</span>\n        </div>\n        <p class="text">${o}</p>`,t===this.yourUser?(r.querySelector(".user-name").textContent="You",r.classList.add("message-right")):r.classList.add("message-left"),this.container.querySelector(".form-message").appendChild(r)}}("wss://ws-backend-hzzi.onrender.com/ws").init()},783:(e,r,t)=>{var n=t(618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function s(){}function c(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.addEventListener("error",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function d(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&c(e)}))}function l(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),s;var t,u,f=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var t=r.split(/([^\\/]+)\.js$/),o=t&&t[1];return o&&e?e.split(",").map((function(e){var t=new RegExp("".concat(o,"\\.js$"),"g");return n(r.replace(t,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return t=function(){var e=f(r.filename),t=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),t=!1;return a.call(r,(function(r){if(r.href){var o=function(e,r){var t;return e=n(e),r.some((function(n){e.indexOf(r)>-1&&(t=n)})),t}(r.href,e);l(o)&&!0!==r.visited&&o&&(c(r,o),t=!0)}})),t}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},50,u=0,function(){var e=this,r=arguments;clearTimeout(u),u=setTimeout((function(){return t.apply(e,r)}),50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(r,"i"),"").split("/"),n=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",r+n+t.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},177:(e,r,t)=>{var n=t(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},n={};function o(e){var r=n[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var i=n[e]={id:e,exports:{}};try{var a={id:e,module:i,factory:t[e],require:o};o.i.forEach((function(e){e(a)})),i=a.module,a.factory.call(i.exports,i,i.exports,a.require)}catch(e){throw i.error=e,e}return i.exports}o.m=t,o.c=n,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.miniCssF=e=>{},o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"c852f939edb007fea6f0",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="ws_frontend:",o.l=(t,n,i,a)=>{if(e[t])e[t].push(n);else{var s,c;if(void 0!==i)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==t||u.getAttribute("data-webpack")==r+i){s=u;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.setAttribute("data-webpack",r+i),s.src=t),e[t]=[n];var f=(r,n)=>{s.onerror=s.onload=null,clearTimeout(p);var o=e[t];if(delete e[t],s.parentNode&&s.parentNode.removeChild(s),o&&o.forEach((e=>e(n))),r)return r(n)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=f.bind(null,s.onerror),s.onload=f.bind(null,s.onload),c&&document.head.appendChild(s)}},(()=>{var e,r,t,n={},i=o.c,a=[],s=[],c="idle",d=0,l=[];function u(e){c=e;for(var r=[],t=0;t<s.length;t++)r[t]=s[t].call(null,e);return Promise.all(r)}function f(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var r=0;r<e.length;r++)e[r]()}}))}function p(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return u("check").then(o.hmrM).then((function(t){return t?u("prepare").then((function(){var n=[];return r=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,i){return o.hmrC[i](t.c,t.r,t.m,e,r,n),e}),[])).then((function(){return r=function(){return e?m(e):u("ready").then((function(){return n}))},0===d?r():new Promise((function(e){l.push((function(){e(r())}))}));var r}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+c+")")})):m(e)}function m(e){e=e||{},v();var n=r.map((function(r){return r(e)}));r=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var a,s=u("apply"),c=function(e){a||(a=e)},d=[];return n.forEach((function(e){if(e.apply){var r=e.apply(c);if(r)for(var t=0;t<r.length;t++)d.push(r[t])}})),Promise.all([i,s]).then((function(){return a?u("fail").then((function(){throw a})):t?m(e).then((function(e){return d.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):u("idle").then((function(){return d}))}))}function v(){if(t)return r||(r=[]),Object.keys(o.hmrI).forEach((function(e){t.forEach((function(t){o.hmrI[e](t,r)}))})),t=void 0,!0}o.hmrD=n,o.i.push((function(l){var m,v,y,g,w=l.module,E=function(r,t){var n=i[t];if(!n)return r;var o=function(o){if(n.hot.active){if(i[o]){var s=i[o].parents;-1===s.indexOf(t)&&s.push(t)}else a=[t],e=o;-1===n.children.indexOf(o)&&n.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+t),a=[];return r(o)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(o,l,s(l));return o.e=function(e){return function(e){switch(c){case"ready":u("prepare");case"prepare":return d++,e.then(f,f),e;default:return e}}(r.e(e))},o}(l.require,l.id);w.hot=(m=l.id,v=w,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){a=v.parents.slice(),e=y?void 0:m,o(m)},active:!0,accept:function(e,r,t){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._acceptedDependencies[e[n]]=r||function(){},g._acceptedErrorHandlers[e[n]]=t;else g._acceptedDependencies[e]=r||function(){},g._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._declinedDependencies[e[r]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=g._disposeHandlers.indexOf(e);r>=0&&g._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":r=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,r)})),u("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return c;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var r=s.indexOf(e);r>=0&&s.splice(r,1)},data:n[m]},e=void 0,g),w.parents=a,w.children=[],a=[],l.require=E})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var r=o.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");if(t.length)for(var n=t.length-1;n>-1&&!e;)e=t[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{if("undefined"!=typeof document){var e=[],r=[],t=t=>({dispose:()=>{for(var r=0;r<e.length;r++){var t=e[r];t.parentNode&&t.parentNode.removeChild(t)}e.length=0},apply:()=>{for(var e=0;e<r.length;e++)r[e].rel="stylesheet";r.length=0}});o.hmrC.miniCss=(n,i,a,s,c,d)=>{c.push(t),n.forEach((t=>{var n=o.miniCssF(t),i=o.p+n,a=((e,r)=>{for(var t=document.getElementsByTagName("link"),n=0;n<t.length;n++){var o=(a=t[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===r))return a}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var a;if((o=(a=i[n]).getAttribute("data-href"))===e||o===r)return a}})(n,i);a&&s.push(new Promise(((n,o)=>{var s=((e,r,t,n,o)=>{var i=document.createElement("link");return i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=t=>{if(i.onerror=i.onload=null,"load"===t.type)n();else{var a=t&&("load"===t.type?"missing":t.type),s=t&&t.target&&t.target.href||r,c=new Error("Loading CSS chunk "+e+" failed.\n("+s+")");c.code="CSS_CHUNK_LOAD_FAILED",c.type=a,c.request=s,i.parentNode&&i.parentNode.removeChild(i),o(c)}},i.href=r,t?t.parentNode.insertBefore(i,t.nextSibling):document.head.appendChild(i),i})(t,i,a,(()=>{s.as="style",s.rel="preload",n()}),o);e.push(a),r.push(s)})))}))}}})(),(()=>{var e,r,t,n,i,a=o.hmrS_jsonp=o.hmrS_jsonp||{179:0},s={};function c(r,t){return e=t,new Promise(((e,t)=>{s[r]=e;var n=o.p+o.hu(r),i=new Error;o.l(n,(e=>{if(s[r]){s[r]=void 0;var n=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+r+" failed.\n("+n+": "+o+")",i.name="ChunkLoadError",i.type=n,i.request=o,t(i)}}))}))}function d(e){function s(e){for(var r=[e],t={},n=r.map((function(e){return{chain:[e],id:e}}));n.length>0;){var i=n.pop(),a=i.id,s=i.chain,d=o.c[a];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(d.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],f=o.c[u];if(f){if(f.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([u]),moduleId:a,parentId:u};-1===r.indexOf(u)&&(f.hot._acceptedDependencies[a]?(t[u]||(t[u]=[]),c(t[u],[a])):(delete t[u],r.push(u),n.push({chain:s.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function c(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}o.f&&delete o.f.jsonpHmr,r=void 0;var d={},l=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(o.o(t,p)){var h,m=t[p],v=!1,y=!1,g=!1,w="";switch((h=m?s(p):{type:"disposed",moduleId:p}).chain&&(w="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+w));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+w));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+w));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(p in u[p]=m,c(l,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,p)&&(d[p]||(d[p]=[]),c(d[p],h.outdatedDependencies[p]));g&&(c(l,[h.moduleId]),u[p]=f)}t=void 0;for(var E,b=[],_=0;_<l.length;_++){var x=l[_],S=o.c[x];S&&(S.hot._selfAccepted||S.hot._main)&&u[x]!==f&&!S.hot._selfInvalidated&&b.push({module:x,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete a[e]})),n=void 0;for(var r,t=l.slice();t.length>0;){var i=t.pop(),s=o.c[i];if(s){var c={},u=s.hot._disposeHandlers;for(_=0;_<u.length;_++)u[_].call(null,c);for(o.hmrD[i]=c,s.hot.active=!1,delete o.c[i],delete d[i],_=0;_<s.children.length;_++){var f=o.c[s.children[_]];f&&(e=f.parents.indexOf(i))>=0&&f.parents.splice(e,1)}}}for(var p in d)if(o.o(d,p)&&(s=o.c[p]))for(E=d[p],_=0;_<E.length;_++)r=E[_],(e=s.children.indexOf(r))>=0&&s.children.splice(e,1)},apply:function(r){for(var t in u)o.o(u,t)&&(o.m[t]=u[t]);for(var n=0;n<i.length;n++)i[n](o);for(var a in d)if(o.o(d,a)){var s=o.c[a];if(s){E=d[a];for(var c=[],f=[],p=[],h=0;h<E.length;h++){var m=E[h],v=s.hot._acceptedDependencies[m],y=s.hot._acceptedErrorHandlers[m];if(v){if(-1!==c.indexOf(v))continue;c.push(v),f.push(y),p.push(m)}}for(var g=0;g<c.length;g++)try{c[g].call(null,E)}catch(t){if("function"==typeof f[g])try{f[g](t,{moduleId:a,dependencyId:p[g]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:p[g],error:n,originalError:t}),e.ignoreErrored||(r(n),r(t))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:p[g],error:t}),e.ignoreErrored||r(t)}}}for(var w=0;w<b.length;w++){var _=b[w],x=_.module;try{_.require(x)}catch(t){if("function"==typeof _.errorHandler)try{_.errorHandler(t,{moduleId:x,module:o.c[x]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:n,originalError:t}),e.ignoreErrored||(r(n),r(t))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:x,error:t}),e.ignoreErrored||r(t)}}return l}}}self.webpackHotUpdatews_frontend=(r,n,a)=>{for(var c in n)o.o(n,c)&&(t[c]=n[c],e&&e.push(c));a&&i.push(a),s[r]&&(s[r](),s[r]=void 0)},o.hmrI.jsonp=function(e,r){t||(t={},i=[],n=[],r.push(d)),o.o(t,e)||(t[e]=o.m[e])},o.hmrC.jsonp=function(e,s,l,u,f,p){f.push(d),r={},n=s,t=l.reduce((function(e,r){return e[r]=!1,e}),{}),i=[],e.forEach((function(e){o.o(a,e)&&void 0!==a[e]?(u.push(c(e,p)),r[e]=!0):r[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,t){r&&o.o(r,e)&&!r[e]&&(t.push(c(e)),r[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(991)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SixNQUFNaE4sRUFBb0IrSCxFQUFJL0gsRUFBb0JlLFFBQVEyQyxNQUFNdUosSUFDdEUsR0FBdUIsTUFBcEJBLEVBQVN4RixPQUFaLENBQ0EsSUFBSXdGLEVBQVNDLEdBQUksTUFBTSxJQUFJcEosTUFBTSxtQ0FBcUNtSixFQUFTRSxZQUMvRSxPQUFPRixFQUFTRyxNQUZrQixDQUVaLEdBQ3JCLEMsS0N0ZnVCcE4sRUFBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3dzX2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly93c19mcm9udGVuZC8uL3NyYy9qcy9hcHAuanMiLCJ3ZWJwYWNrOi8vd3NfZnJvbnRlbmQvLi9zcmMvanMvQ2hhdC5qcyIsIndlYnBhY2s6Ly93c19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly93c19mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ub3JtYWxpemUtdXJsLmpzIiwid2VicGFjazovL3dzX2Zyb250ZW5kLy4vc3JjL2Nzcy9zdHlsZS5jc3M/NmI3YiIsIndlYnBhY2s6Ly93c19mcm9udGVuZC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93c19mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgdXBkYXRlIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3dzX2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vd3NfZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2dldCB1cGRhdGUgbWFuaWZlc3QgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vd3NfZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL3dzX2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vd3NfZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93c19mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly93c19mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly93c19mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vd3NfZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vd3NfZnJvbnRlbmQvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcIndzX2Zyb250ZW5kOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLyogZXNsaW50LWRpc2FibGUgbGluZWJyZWFrLXN0eWxlICovXG5pbXBvcnQgQ2hhdCBmcm9tICcuL0NoYXQnO1xuXG5jb25zdCBjaGF0ID0gbmV3IENoYXQoJ3dzczovL3dzLWJhY2tlbmQtaHp6aS5vbnJlbmRlci5jb20vd3MnKTtcbmNoYXQuaW5pdCgpO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbGluZWJyZWFrLXN0eWxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1hbGVydCAqL1xuLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuLyogZXNsaW50LWRpc2FibGUgbGluZWJyZWFrLXN0eWxlICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGF0IHtcbiAgY29uc3RydWN0b3IodXJsKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy51c2VycyA9IFtdO1xuICAgIHRoaXMueW91clVzZXIgPSBudWxsO1xuICAgIHRoaXMud3MgPSBuZXcgV2ViU29ja2V0KHRoaXMudXJsKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5mb3JtQXV0b3JpemF0aW9uKCk7XG4gICAgdGhpcy53cy5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3RlZCcpO1xuICAgIH0pO1xuICAgIHRoaXMud3MuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldnQpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2dC5kYXRhKTtcbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgICAgYWxlcnQoJ9CU0LDQvdC90YvQuSDQv9GB0LXQstC00L7QvdC40Lwg0LfQsNC90Y/Rgi4g0JLRi9Cx0LXRgNC40YLQtSDQtNGA0YPQs9C+0LksINC/0L7QttCw0LvRg9C50YHRgtCwLicpO1xuICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT09ICdhdXRvcml6ZWQnIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3VzZXJzJykge1xuICAgICAgICB0aGlzLnVzZXJzID0gbWVzc2FnZS5kYXRhO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgdGhpcy5zaG93Q2hhdCgpO1xuICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT09ICdwb3N0TWVzc2FnZScpIHtcbiAgICAgICAgdGhpcy5zaG93TWVzc2FnZShtZXNzYWdlLmRhdGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMud3MuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoZXZ0KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnY29ubmVjdGlvbiBjbG9zZWQnLCBldnQpO1xuICAgIH0pO1xuICAgIHRoaXMud3MuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnZXJyb3InKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgKCkgPT4ge1xuICAgICAgdGhpcy53cy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogJ2RlbGV0ZVVzZXInLCB1c2VyOiB0aGlzLnlvdXJVc2VyIH0pKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZvcm1BdXRvcml6YXRpb24oKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICBmb3JtLmNsYXNzTGlzdC5hZGQoJ2F1dG9yaXphdGlvbicpO1xuICAgIGZvcm0uaW5uZXJIVE1MID0gYDxoND7QktGL0LHQtdGA0LjRgtC1INC/0YHQtdCy0LTQvtC90LjQvDwvaDQ+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cImlucHV0XCIgdHlwZT1cInRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG5cIj7Qn9GA0L7QtNC+0LvQttC40YLRjDwvYnV0dG9uPmA7XG4gICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJywgZm9ybSk7XG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy55b3VyVXNlciA9IGZvcm0ucXVlcnlTZWxlY3RvcignaW5wdXQnKS52YWx1ZTtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7IHR5cGU6ICdhdXRvcml6YXRpb24nLCBuYW1lOiB0aGlzLnlvdXJVc2VyIH07XG4gICAgICB0aGlzLndzLnNlbmQoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgc2hvd0NoYXQoKSB7XG4gICAgY29uc3QgZm9ybUNoYXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgZm9ybUNoYXQuY2xhc3NMaXN0LmFkZCgnZm9ybS1jaGF0Jyk7XG4gICAgZm9ybUNoYXQuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJ1c2Vyc1wiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hhdFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLW1lc3NhZ2VcIj48L2Rpdj5cbiAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJpbnB1dC1jaGF0XCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlR5cGUgeW91ciBtZXNzYWdlIGhlcmVcIiByZXF1aXJlZD5cbiAgICAgICAgPC9kaXY+YDtcbiAgICB0aGlzLmNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyYmVnaW4nLCBmb3JtQ2hhdCk7XG4gICAgY29uc3QgZm9ybVVzZXJzID0gZm9ybUNoYXQucXVlcnlTZWxlY3RvcignLnVzZXJzJyk7XG4gICAgdGhpcy51c2Vycy5mb3JFYWNoKCh1c2VyKSA9PiB7XG4gICAgICBjb25zdCB1c2VyRm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICB1c2VyRm9ybS5jbGFzc0xpc3QuYWRkKCd1c2VyJyk7XG4gICAgICB1c2VyRm9ybS50ZXh0Q29udGVudCA9IHVzZXIubmFtZTtcbiAgICAgIGlmICh1c2VyLm5hbWUgPT09IHRoaXMueW91clVzZXIpIHtcbiAgICAgICAgdXNlckZvcm0udGV4dENvbnRlbnQgPSAnWW91JztcbiAgICAgIH1cbiAgICAgIGZvcm1Vc2Vycy5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWVuZCcsIHVzZXJGb3JtKTtcbiAgICB9KTtcbiAgICBjb25zdCBjaGF0ID0gZm9ybUNoYXQucXVlcnlTZWxlY3RvcignLmlucHV0LWNoYXQnKTtcbiAgICBmb3JtQ2hhdC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNoYXQudmFsdWU7XG4gICAgICBjb25zdCB0aW1lID0gdGhpcy5kYXRlVG9TdHJpbmcoKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICAgIHR5cGU6ICdwb3N0TWVzc2FnZScsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBuYW1lOiB0aGlzLnlvdXJVc2VyLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgdGltZSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICB0aGlzLndzLnNlbmQoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICAgICAgY2hhdC52YWx1ZSA9ICcnO1xuICAgIH0pO1xuICB9XG5cbiAgZGF0ZVRvU3RyaW5nKCkge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGRhdGUudG9Mb2NhbGVTdHJpbmcoJ3J1LVJ1Jywge1xuICAgICAgeWVhcjogJzItZGlnaXQnLFxuICAgICAgbW9udGg6ICcyLWRpZ2l0JyxcbiAgICAgIGRheTogJzItZGlnaXQnLFxuICAgICAgaG91cjogJzItZGlnaXQnLFxuICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKC9bLCVdL2csICcnKTtcbiAgfVxuXG4gIHNob3dNZXNzYWdlKGRhdGEpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbWVzc2FnZS5jbGFzc0xpc3QuYWRkKCdtZXNzYWdlJyk7XG4gICAgY29uc3QgeyBuYW1lLCB0aW1lLCBjb250ZXh0IH0gPSBkYXRhLmRhdGE7XG4gICAgbWVzc2FnZS5pbm5lckhUTUwgPSBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXRhLXVzZXJcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInVzZXItbmFtZVwiPiR7bmFtZX08L3NwYW4+XG4gICAgICAgICAgPHNwYW4+JHt0aW1lfTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxwIGNsYXNzPVwidGV4dFwiPiR7Y29udGV4dH08L3A+YDtcbiAgICBpZiAobmFtZSA9PT0gdGhpcy55b3VyVXNlcikge1xuICAgICAgbWVzc2FnZS5xdWVyeVNlbGVjdG9yKCcudXNlci1uYW1lJykudGV4dENvbnRlbnQgPSAnWW91JztcbiAgICAgIG1lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnbWVzc2FnZS1yaWdodCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlLmNsYXNzTGlzdC5hZGQoJ21lc3NhZ2UtbGVmdCcpO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZm9ybS1tZXNzYWdlJykuYXBwZW5kQ2hpbGQobWVzc2FnZSk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbi8qXG4gIGVzbGludC1kaXNhYmxlXG4gIG5vLWNvbnNvbGUsXG4gIGZ1bmMtbmFtZXNcbiovXG5cbi8qKiBAdHlwZWRlZiB7YW55fSBUT0RPICovXG5cbnZhciBub3JtYWxpemVVcmwgPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtdXJsXCIpO1xudmFyIHNyY0J5TW9kdWxlSWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xudmFyIG5vRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCI7XG52YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICogQHJldHVybnMgeyhmdW5jdGlvbigpOiB2b2lkKXwqfVxuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgdGltZSkge1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIGZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9O1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbkNhbGwsIHRpbWUpO1xuICB9O1xufVxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8qKlxuICogQHBhcmFtIHtUT0RPfSBtb2R1bGVJZFxuICogQHJldHVybnMge1RPRE99XG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpIHtcbiAgdmFyIHNyYyA9IHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdO1xuICBpZiAoIXNyYykge1xuICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgICBzcmMgPSAvKiogQHR5cGUge0hUTUxTY3JpcHRFbGVtZW50fSAqL2RvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuICAgICAgdmFyIGxhc3RTY3JpcHRUYWcgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAobGFzdFNjcmlwdFRhZykge1xuICAgICAgICBzcmMgPSBsYXN0U2NyaXB0VGFnLnNyYztcbiAgICAgIH1cbiAgICB9XG4gICAgc3JjQnlNb2R1bGVJZFttb2R1bGVJZF0gPSBzcmM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVNYXBcbiAgICogQHJldHVybnMge251bGwgfCBzdHJpbmdbXX1cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoZmlsZU1hcCkge1xuICAgIGlmICghc3JjKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHNwbGl0UmVzdWx0ID0gc3JjLnNwbGl0KC8oW15cXFxcL10rKVxcLmpzJC8pO1xuICAgIHZhciBmaWxlbmFtZSA9IHNwbGl0UmVzdWx0ICYmIHNwbGl0UmVzdWx0WzFdO1xuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoXCIuanNcIiwgXCIuY3NzXCIpXTtcbiAgICB9XG4gICAgaWYgKCFmaWxlTWFwKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKFwiLmpzXCIsIFwiLmNzc1wiKV07XG4gICAgfVxuICAgIHJldHVybiBmaWxlTWFwLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24gKG1hcFJ1bGUpIHtcbiAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KGZpbGVuYW1lLCBcIlxcXFwuanMkXCIpLCBcImdcIik7XG4gICAgICByZXR1cm4gbm9ybWFsaXplVXJsKHNyYy5yZXBsYWNlKHJlZywgXCJcIi5jb25jYXQobWFwUnVsZS5yZXBsYWNlKC97ZmlsZU5hbWV9L2csIGZpbGVuYW1lKSwgXCIuY3NzXCIpKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtUT0RPfSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IFt1cmxdXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUNzcyhlbCwgdXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdXJsID0gZWwuaHJlZi5zcGxpdChcIj9cIilbMF07XG4gIH1cbiAgaWYgKCFpc1VybFJlcXVlc3QoIC8qKiBAdHlwZSB7c3RyaW5nfSAqL3VybCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGVsLmlzTG9hZGVkID09PSBmYWxzZSkge1xuICAgIC8vIFdlIHNlZW0gdG8gYmUgYWJvdXQgdG8gcmVwbGFjZSBhIGNzcyBsaW5rIHRoYXQgaGFzbid0IGxvYWRlZCB5ZXQuXG4gICAgLy8gV2UncmUgcHJvYmFibHkgY2hhbmdpbmcgdGhlIHNhbWUgZmlsZSBtb3JlIHRoYW4gb25jZS5cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF1cmwgfHwgISh1cmwuaW5kZXhPZihcIi5jc3NcIikgPiAtMSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZWwudmlzaXRlZCA9IHRydWU7XG4gIHZhciBuZXdFbCA9IGVsLmNsb25lTm9kZSgpO1xuICBuZXdFbC5pc0xvYWRlZCA9IGZhbHNlO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5ld0VsLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5ld0VsLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmhyZWYgPSBcIlwiLmNvbmNhdCh1cmwsIFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7XG4gIGlmIChlbC5uZXh0U2libGluZykge1xuICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBlbC5uZXh0U2libGluZyk7XG4gIH0gZWxzZSB7XG4gICAgZWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdFbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHJlZlxuICogQHBhcmFtIHtUT0RPfSBzcmNcbiAqIEByZXR1cm5zIHtUT0RPfVxuICovXG5mdW5jdGlvbiBnZXRSZWxvYWRVcmwoaHJlZiwgc3JjKSB7XG4gIHZhciByZXQ7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGhyZWYgPSBub3JtYWxpemVVcmwoaHJlZik7XG4gIHNyYy5zb21lKFxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuICBmdW5jdGlvbiAodXJsKSB7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihzcmMpID4gLTEpIHtcbiAgICAgIHJldCA9IHVybDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3JjXVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHJlbG9hZFN0eWxlKHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1wiKTtcbiAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdXJsID0gZ2V0UmVsb2FkVXJsKGVsLmhyZWYsIHNyYyk7XG4gICAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodXJsKSB7XG4gICAgICB1cGRhdGVDc3MoZWwsIHVybCk7XG4gICAgICBsb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsb2FkZWQ7XG59XG5mdW5jdGlvbiByZWxvYWRBbGwoKSB7XG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaW5rXCIpO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHVwZGF0ZUNzcyhlbCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1VybFJlcXVlc3QodXJsKSB7XG4gIC8vIEFuIFVSTCBpcyBub3QgYW4gcmVxdWVzdCBpZlxuXG4gIC8vIEl0IGlzIG5vdCBodHRwIG9yIGh0dHBzXG4gIGlmICghL15bYS16QS1aXVthLXpBLVpcXGQrXFwtLl0qOi8udGVzdCh1cmwpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7VE9ET30gbW9kdWxlSWRcbiAqIEBwYXJhbSB7VE9ET30gb3B0aW9uc1xuICogQHJldHVybnMge1RPRE99XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBvcHRpb25zKSB7XG4gIGlmIChub0RvY3VtZW50KSB7XG4gICAgY29uc29sZS5sb2coXCJubyB3aW5kb3cuZG9jdW1lbnQgZm91bmQsIHdpbGwgbm90IEhNUiBDU1NcIik7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH1cbiAgdmFyIGdldFNjcmlwdFNyYyA9IGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpO1xuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHNyYyA9IGdldFNjcmlwdFNyYyhvcHRpb25zLmZpbGVuYW1lKTtcbiAgICB2YXIgcmVsb2FkZWQgPSByZWxvYWRTdHlsZShzcmMpO1xuICAgIGlmIChvcHRpb25zLmxvY2Fscykge1xuICAgICAgY29uc29sZS5sb2coXCJbSE1SXSBEZXRlY3RlZCBsb2NhbCBjc3MgbW9kdWxlcy4gUmVsb2FkIGFsbCBjc3NcIik7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHJlbG9hZGVkKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIltITVJdIGNzcyByZWxvYWQgJXNcIiwgc3JjLmpvaW4oXCIgXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJbSE1SXSBSZWxvYWQgYWxsIGNzc1wiKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVib3VuY2UodXBkYXRlLCA1MCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhDb21wb25lbnRzXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVVcmwocGF0aENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHBhdGhDb21wb25lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGl0ZW0pIHtcbiAgICBzd2l0Y2ggKGl0ZW0pIHtcbiAgICAgIGNhc2UgXCIuLlwiOlxuICAgICAgICBhY2N1bXVsYXRvci5wb3AoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiLlwiOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwgLyoqIEB0eXBlIHtzdHJpbmdbXX0gKi9bXSkuam9pbihcIi9cIik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsU3RyaW5nKSB7XG4gIHVybFN0cmluZyA9IHVybFN0cmluZy50cmltKCk7XG4gIGlmICgvXmRhdGE6L2kudGVzdCh1cmxTdHJpbmcpKSB7XG4gICAgcmV0dXJuIHVybFN0cmluZztcbiAgfVxuICB2YXIgcHJvdG9jb2wgPSB1cmxTdHJpbmcuaW5kZXhPZihcIi8vXCIpICE9PSAtMSA/IHVybFN0cmluZy5zcGxpdChcIi8vXCIpWzBdICsgXCIvL1wiIDogXCJcIjtcbiAgdmFyIGNvbXBvbmVudHMgPSB1cmxTdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKHByb3RvY29sLCBcImlcIiksIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgdmFyIGhvc3QgPSBjb21wb25lbnRzWzBdLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFwuJC8sIFwiXCIpO1xuICBjb21wb25lbnRzWzBdID0gXCJcIjtcbiAgdmFyIHBhdGggPSBub3JtYWxpemVVcmwoY29tcG9uZW50cyk7XG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRoO1xufTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNjkwNzQxMDA5MTg1XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoY2FjaGVkTW9kdWxlLmVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGNhY2hlZE1vZHVsZS5lcnJvcjtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dHJ5IHtcblx0XHR2YXIgZXhlY09wdGlvbnMgPSB7IGlkOiBtb2R1bGVJZCwgbW9kdWxlOiBtb2R1bGUsIGZhY3Rvcnk6IF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLCByZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fIH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdFx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRcdGV4ZWNPcHRpb25zLmZhY3RvcnkuY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgZXhlY09wdGlvbnMucmVxdWlyZSk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdG1vZHVsZS5lcnJvciA9IGU7XG5cdFx0dGhyb3cgZTtcblx0fVxuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGV4ZWN1dGlvbiBpbnRlcmNlcHRvclxuX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gW107XG5cbiIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uaHUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiB1bmRlZmluZWQ7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1yRiA9ICgpID0+IChcIm1haW4uXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNvblwiKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCJjODUyZjkzOWVkYjAwN2ZlYTZmMFwiKSIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBjdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xudmFyIGluc3RhbGxlZE1vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmM7XG5cbi8vIG1vZHVsZSBhbmQgcmVxdWlyZSBjcmVhdGlvblxudmFyIGN1cnJlbnRDaGlsZE1vZHVsZTtcbnZhciBjdXJyZW50UGFyZW50cyA9IFtdO1xuXG4vLyBzdGF0dXNcbnZhciByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMgPSBbXTtcbnZhciBjdXJyZW50U3RhdHVzID0gXCJpZGxlXCI7XG5cbi8vIHdoaWxlIGRvd25sb2FkaW5nXG52YXIgYmxvY2tpbmdQcm9taXNlcyA9IDA7XG52YXIgYmxvY2tpbmdQcm9taXNlc1dhaXRpbmcgPSBbXTtcblxuLy8gVGhlIHVwZGF0ZSBpbmZvXG52YXIgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnM7XG52YXIgcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbl9fd2VicGFja19yZXF1aXJlX18uaG1yRCA9IGN1cnJlbnRNb2R1bGVEYXRhO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkucHVzaChmdW5jdGlvbiAob3B0aW9ucykge1xuXHR2YXIgbW9kdWxlID0gb3B0aW9ucy5tb2R1bGU7XG5cdHZhciByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShvcHRpb25zLnJlcXVpcmUsIG9wdGlvbnMuaWQpO1xuXHRtb2R1bGUuaG90ID0gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG9wdGlvbnMuaWQsIG1vZHVsZSk7XG5cdG1vZHVsZS5wYXJlbnRzID0gY3VycmVudFBhcmVudHM7XG5cdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRvcHRpb25zLnJlcXVpcmUgPSByZXF1aXJlO1xufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUocmVxdWlyZSwgbW9kdWxlSWQpIHtcblx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cdGlmICghbWUpIHJldHVybiByZXF1aXJlO1xuXHR2YXIgZm4gPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuXHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG5cdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuXHRcdFx0XHR2YXIgcGFyZW50cyA9IGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cztcblx0XHRcdFx0aWYgKHBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG5cdFx0XHRcdFx0cGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuXHRcdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG5cdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuXHRcdFx0XHRcdHJlcXVlc3QgK1xuXHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG5cdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdCk7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVxdWlyZShyZXF1ZXN0KTtcblx0fTtcblx0dmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIHJlcXVpcmVbbmFtZV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmVxdWlyZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGZvciAodmFyIG5hbWUgaW4gcmVxdWlyZSkge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVxdWlyZSwgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKG5hbWUpKTtcblx0XHR9XG5cdH1cblx0Zm4uZSA9IGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0cmV0dXJuIHRyYWNrQmxvY2tpbmdQcm9taXNlKHJlcXVpcmUuZShjaHVua0lkKSk7XG5cdH07XG5cdHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG1vZHVsZUlkLCBtZSkge1xuXHR2YXIgX21haW4gPSBjdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkO1xuXHR2YXIgaG90ID0ge1xuXHRcdC8vIHByaXZhdGUgc3R1ZmZcblx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9hY2NlcHRlZEVycm9ySGFuZGxlcnM6IHt9LFxuXHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG5cdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG5cdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG5cdFx0X3NlbGZJbnZhbGlkYXRlZDogZmFsc2UsXG5cdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG5cdFx0X21haW46IF9tYWluLFxuXHRcdF9yZXF1aXJlU2VsZjogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBtZS5wYXJlbnRzLnNsaWNlKCk7XG5cdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSBfbWFpbiA/IHVuZGVmaW5lZCA6IG1vZHVsZUlkO1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG5cdFx0fSxcblxuXHRcdC8vIE1vZHVsZSBBUElcblx0XHRhY3RpdmU6IHRydWUsXG5cdFx0YWNjZXB0OiBmdW5jdGlvbiAoZGVwLCBjYWxsYmFjaywgZXJyb3JIYW5kbGVyKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbCkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcFtpXV0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBdID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZGVjbGluZTogZnVuY3Rpb24gKGRlcCkge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbClcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcblx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcblx0XHR9LFxuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcblx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblx0XHRpbnZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLl9zZWxmSW52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0XHRcdGNhc2UgXCJpZGxlXCI6XG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRcdGNhc2UgXCJjaGVja1wiOlxuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZVwiOlxuXHRcdFx0XHRjYXNlIFwiYXBwbHlcIjpcblx0XHRcdFx0XHQocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIHx8IFtdKS5wdXNoKFxuXHRcdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vIGlnbm9yZSByZXF1ZXN0cyBpbiBlcnJvciBzdGF0ZXNcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTWFuYWdlbWVudCBBUElcblx0XHRjaGVjazogaG90Q2hlY2ssXG5cdFx0YXBwbHk6IGhvdEFwcGx5LFxuXHRcdHN0YXR1czogZnVuY3Rpb24gKGwpIHtcblx0XHRcdGlmICghbCkgcmV0dXJuIGN1cnJlbnRTdGF0dXM7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHR2YXIgaWR4ID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG5cdFx0XHRpZiAoaWR4ID49IDApIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXG5cdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG5cdFx0ZGF0YTogY3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG5cdH07XG5cdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcblx0cmV0dXJuIGhvdDtcbn1cblxuZnVuY3Rpb24gc2V0U3RhdHVzKG5ld1N0YXR1cykge1xuXHRjdXJyZW50U3RhdHVzID0gbmV3U3RhdHVzO1xuXHR2YXIgcmVzdWx0cyA9IFtdO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuXHRcdHJlc3VsdHNbaV0gPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChyZXN1bHRzKTtcbn1cblxuZnVuY3Rpb24gdW5ibG9jaygpIHtcblx0aWYgKC0tYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkge1xuXHRcdHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKGJsb2NraW5nUHJvbWlzZXMgPT09IDApIHtcblx0XHRcdFx0dmFyIGxpc3QgPSBibG9ja2luZ1Byb21pc2VzV2FpdGluZztcblx0XHRcdFx0YmxvY2tpbmdQcm9taXNlc1dhaXRpbmcgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0bGlzdFtpXSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdHJhY2tCbG9ja2luZ1Byb21pc2UocHJvbWlzZSkge1xuXHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdHNldFN0YXR1cyhcInByZXBhcmVcIik7XG5cdFx0LyogZmFsbHRocm91Z2ggKi9cblx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0YmxvY2tpbmdQcm9taXNlcysrO1xuXHRcdFx0cHJvbWlzZS50aGVuKHVuYmxvY2ssIHVuYmxvY2spO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKSB7XG5cdGlmIChibG9ja2luZ1Byb21pc2VzID09PSAwKSByZXR1cm4gZm4oKTtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdFx0YmxvY2tpbmdQcm9taXNlc1dhaXRpbmcucHVzaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXNvbHZlKGZuKCkpO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90Q2hlY2soYXBwbHlPblVwZGF0ZSkge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcblx0fVxuXHRyZXR1cm4gc2V0U3RhdHVzKFwiY2hlY2tcIilcblx0XHQudGhlbihfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVwZGF0ZSkge1xuXHRcdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpLnRoZW4oXG5cdFx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicHJlcGFyZVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHVwZGF0ZWRNb2R1bGVzID0gW107XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cblx0XHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1yQykucmVkdWNlKGZ1bmN0aW9uIChcblx0XHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdFx0a2V5XG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckNba2V5XShcblx0XHRcdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5yLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUubSxcblx0XHRcdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGVkTW9kdWxlc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiBwcm9taXNlcztcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFtdKVxuXHRcdFx0XHQpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRpZiAoYXBwbHlPblVwZGF0ZSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShhcHBseU9uVXBkYXRlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzZXRTdGF0dXMoXCJyZWFkeVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdXBkYXRlZE1vZHVsZXM7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xufVxuXG5mdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcInJlYWR5XCIpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzIChzdGF0ZTogXCIgK1xuXHRcdFx0XHRcdGN1cnJlbnRTdGF0dXMgK1xuXHRcdFx0XHRcdFwiKVwiXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0YXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKTtcblxuXHR2YXIgcmVzdWx0cyA9IGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLm1hcChmdW5jdGlvbiAoaGFuZGxlcikge1xuXHRcdHJldHVybiBoYW5kbGVyKG9wdGlvbnMpO1xuXHR9KTtcblx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSB1bmRlZmluZWQ7XG5cblx0dmFyIGVycm9ycyA9IHJlc3VsdHNcblx0XHQubWFwKGZ1bmN0aW9uIChyKSB7XG5cdFx0XHRyZXR1cm4gci5lcnJvcjtcblx0XHR9KVxuXHRcdC5maWx0ZXIoQm9vbGVhbik7XG5cblx0aWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG5cdFx0cmV0dXJuIHNldFN0YXR1cyhcImFib3J0XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgZXJyb3JzWzBdO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG5cdHZhciBkaXNwb3NlUHJvbWlzZSA9IHNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG5cblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmRpc3Bvc2UpIHJlc3VsdC5kaXNwb3NlKCk7XG5cdH0pO1xuXG5cdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2Vcblx0dmFyIGFwcGx5UHJvbWlzZSA9IHNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG5cdHZhciBlcnJvcjtcblx0dmFyIHJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuXHR9O1xuXG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmFwcGx5KSB7XG5cdFx0XHR2YXIgbW9kdWxlcyA9IHJlc3VsdC5hcHBseShyZXBvcnRFcnJvcik7XG5cdFx0XHRpZiAobW9kdWxlcykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChtb2R1bGVzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIFByb21pc2UuYWxsKFtkaXNwb3NlUHJvbWlzZSwgYXBwbHlQcm9taXNlXSkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcblx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdHJldHVybiBzZXRTdGF0dXMoXCJmYWlsXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGxpc3QpIHtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdFx0aWYgKGxpc3QuaW5kZXhPZihtb2R1bGVJZCkgPCAwKSBsaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIGxpc3Q7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiaWRsZVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhcHBseUludmFsaWRhdGVkTW9kdWxlcygpIHtcblx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdGlmICghY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMpIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gdW5kZWZpbmVkO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAhc2NyaXB0VXJsKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuO1xudmFyIGNyZWF0ZVN0eWxlc2hlZXQgPSAoY2h1bmtJZCwgZnVsbGhyZWYsIG9sZFRhZywgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR2YXIgb25MaW5rQ29tcGxldGUgPSAoZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MuXG5cdFx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBudWxsO1xuXHRcdGlmIChldmVudC50eXBlID09PSAnbG9hZCcpIHtcblx0XHRcdHJlc29sdmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIuY29kZSA9IFwiQ1NTX0NIVU5LX0xPQURfRkFJTEVEXCI7XG5cdFx0XHRlcnIudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdGVyci5yZXF1ZXN0ID0gcmVhbEhyZWY7XG5cdFx0XHRpZiAobGlua1RhZy5wYXJlbnROb2RlKSBsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fVxuXHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG9uTGlua0NvbXBsZXRlO1xuXHRsaW5rVGFnLmhyZWYgPSBmdWxsaHJlZjtcblxuXHRpZiAob2xkVGFnKSB7XG5cdFx0b2xkVGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGxpbmtUYWcsIG9sZFRhZy5uZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcblx0fVxuXHRyZXR1cm4gbGlua1RhZztcbn07XG52YXIgZmluZFN0eWxlc2hlZXQgPSAoaHJlZiwgZnVsbGhyZWYpID0+IHtcblx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ0xpbmtUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcblx0XHRpZih0YWcucmVsID09PSBcInN0eWxlc2hlZXRcIiAmJiAoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSkgcmV0dXJuIHRhZztcblx0fVxuXHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdTdHlsZVRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG5cdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcblx0XHRpZihkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpIHJldHVybiB0YWc7XG5cdH1cbn07XG52YXIgbG9hZFN0eWxlc2hlZXQgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGlmKGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKSkgcmV0dXJuIHJlc29sdmUoKTtcblx0XHRjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCBudWxsLCByZXNvbHZlLCByZWplY3QpO1xuXHR9KTtcbn1cbi8vIG5vIGNodW5rIGxvYWRpbmdcblxudmFyIG9sZFRhZ3MgPSBbXTtcbnZhciBuZXdUYWdzID0gW107XG52YXIgYXBwbHlIYW5kbGVyID0gKG9wdGlvbnMpID0+IHtcblx0cmV0dXJuIHsgZGlzcG9zZTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBvbGRUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgb2xkVGFnID0gb2xkVGFnc1tpXTtcblx0XHRcdGlmKG9sZFRhZy5wYXJlbnROb2RlKSBvbGRUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRUYWcpO1xuXHRcdH1cblx0XHRvbGRUYWdzLmxlbmd0aCA9IDA7XG5cdH0sIGFwcGx5OiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5ld1RhZ3MubGVuZ3RoOyBpKyspIG5ld1RhZ3NbaV0ucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdFx0bmV3VGFncy5sZW5ndGggPSAwO1xuXHR9IH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMubWluaUNzcyA9IChjaHVua0lkcywgcmVtb3ZlZENodW5rcywgcmVtb3ZlZE1vZHVsZXMsIHByb21pc2VzLCBhcHBseUhhbmRsZXJzLCB1cGRhdGVkTW9kdWxlc0xpc3QpID0+IHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGNodW5rSWRzLmZvckVhY2goKGNodW5rSWQpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHR2YXIgb2xkVGFnID0gZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpO1xuXHRcdGlmKCFvbGRUYWcpIHJldHVybjtcblx0XHRwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciB0YWcgPSBjcmVhdGVTdHlsZXNoZWV0KGNodW5rSWQsIGZ1bGxocmVmLCBvbGRUYWcsICgpID0+IHtcblx0XHRcdFx0dGFnLmFzID0gXCJzdHlsZVwiO1xuXHRcdFx0XHR0YWcucmVsID0gXCJwcmVsb2FkXCI7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0sIHJlamVjdCk7XG5cdFx0XHRvbGRUYWdzLnB1c2gob2xkVGFnKTtcblx0XHRcdG5ld1RhZ3MucHVzaCh0YWcpO1xuXHRcdH0pKTtcblx0fSk7XG59IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgfHwge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG52YXIgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdDtcbnZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpIHtcblx0Y3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCA9IHVwZGF0ZWRNb2R1bGVzTGlzdDtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlO1xuXHRcdC8vIHN0YXJ0IHVwZGF0ZSBjaHVuayBsb2FkaW5nXG5cdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7XG5cdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdFx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWRcblx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGhvdCB1cGRhdGUgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQpO1xuXHR9KTtcbn1cblxuc2VsZltcIndlYnBhY2tIb3RVcGRhdGV3c19mcm9udGVuZFwiXSA9IChjaHVua0lkLCBtb3JlTW9kdWxlcywgcnVudGltZSkgPT4ge1xuXHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0aWYoY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCkgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgY3VycmVudFVwZGF0ZVJ1bnRpbWUucHVzaChydW50aW1lKTtcblx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKCk7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHR9XG59O1xuXG52YXIgY3VycmVudFVwZGF0ZUNodW5rcztcbnZhciBjdXJyZW50VXBkYXRlO1xudmFyIGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGVSdW50aW1lO1xuZnVuY3Rpb24gYXBwbHlIYW5kbGVyKG9wdGlvbnMpIHtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikgZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtcjtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHVuZGVmaW5lZDtcblx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKHVwZGF0ZU1vZHVsZUlkKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG5cdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cblx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y2hhaW46IFtpZF0sXG5cdFx0XHRcdGlkOiBpZFxuXHRcdFx0fTtcblx0XHR9KTtcblx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuXHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuXHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCFtb2R1bGUgfHxcblx0XHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCAmJiAhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkKVxuXHRcdFx0KVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG5cdFx0XHRcdHZhciBwYXJlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbcGFyZW50SWRdO1xuXHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG5cdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcblx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcblx0XHRcdFx0cXVldWUucHVzaCh7XG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRpZDogcGFyZW50SWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcblx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcblx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuXHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gYltpXTtcblx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcblx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuXHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG5cdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUobW9kdWxlKSB7XG5cdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyBtb2R1bGUuaWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcblx0XHQpO1xuXHR9O1xuXG5cdGZvciAodmFyIG1vZHVsZUlkIGluIGN1cnJlbnRVcGRhdGUpIHtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdFx0dmFyIG5ld01vZHVsZUZhY3RvcnkgPSBjdXJyZW50VXBkYXRlW21vZHVsZUlkXTtcblx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cblx0XHRcdHZhciByZXN1bHQ7XG5cdFx0XHRpZiAobmV3TW9kdWxlRmFjdG9yeSkge1xuXHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMobW9kdWxlSWQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0ID0ge1xuXHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG5cdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcblx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcblx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuXHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuXHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGVycm9yOiBhYm9ydEVycm9yXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9BcHBseSkge1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IG5ld01vZHVsZUZhY3Rvcnk7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG5cdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcblx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRjdXJyZW50VXBkYXRlID0gdW5kZWZpbmVkO1xuXG5cdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cblx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuXHRmb3IgKHZhciBqID0gMDsgaiA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGorKykge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2pdO1xuXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0aWYgKFxuXHRcdFx0bW9kdWxlICYmXG5cdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkIHx8IG1vZHVsZS5ob3QuX21haW4pICYmXG5cdFx0XHQvLyByZW1vdmVkIHNlbGYtYWNjZXB0ZWQgbW9kdWxlcyBzaG91bGQgbm90IGJlIHJlcXVpcmVkXG5cdFx0XHRhcHBsaWVkVXBkYXRlW291dGRhdGVkTW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmUgJiZcblx0XHRcdC8vIHdoZW4gY2FsbGVkIGludmFsaWRhdGUgc2VsZi1hY2NlcHRpbmcgaXMgbm90IHBvc3NpYmxlXG5cdFx0XHQhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkXG5cdFx0KSB7XG5cdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG5cdFx0XHRcdG1vZHVsZTogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0cmVxdWlyZTogbW9kdWxlLmhvdC5fcmVxdWlyZVNlbGYsXG5cdFx0XHRcdGVycm9ySGFuZGxlcjogbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG5cblx0cmV0dXJuIHtcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHR9KTtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gdW5kZWZpbmVkO1xuXG5cdFx0XHR2YXIgaWR4O1xuXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG5cdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcblx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuXHRcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0ZGlzcG9zZUhhbmRsZXJzW2pdLmNhbGwobnVsbCwgZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJEW21vZHVsZUlkXSA9IGRhdGE7XG5cblx0XHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcblx0XHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcblx0XHRcdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgY2hpbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcblx0XHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuXHRcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuXHRcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cblx0XHRcdHZhciBkZXBlbmRlbmN5O1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXBwbHk6IGZ1bmN0aW9uIChyZXBvcnRFcnJvcikge1xuXHRcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG5cdFx0XHRmb3IgKHZhciB1cGRhdGVNb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oYXBwbGllZFVwZGF0ZSwgdXBkYXRlTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW3VwZGF0ZU1vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJ1biBuZXcgcnVudGltZSBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRVcGRhdGVSdW50aW1lLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lW2ldKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdHZhciBhY2NlcHRDYWxsYmFjayA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXIgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0aWYgKGFjY2VwdENhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGFjY2VwdENhbGxiYWNrKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGFjY2VwdENhbGxiYWNrKTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzLnB1c2goZXJyb3JIYW5kbGVyKTtcblx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MucHVzaChkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBjYWxsYmFja3MubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3Nba10uY2FsbChudWxsLCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgZXJyb3JIYW5kbGVyc1trXSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzW2tdKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIG8gPSAwOyBvIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgbysrKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW29dO1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpdGVtLnJlcXVpcmUobW9kdWxlSWQpO1xuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGU6IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9XG5cdH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkuanNvbnAgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGFwcGx5SGFuZGxlcnMpIHtcblx0aWYgKCFjdXJyZW50VXBkYXRlKSB7XG5cdFx0Y3VycmVudFVwZGF0ZSA9IHt9O1xuXHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSBbXTtcblx0XHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0fVxuXHRpZiAoIV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF07XG5cdH1cbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMuanNvbnAgPSBmdW5jdGlvbiAoXG5cdGNodW5rSWRzLFxuXHRyZW1vdmVkQ2h1bmtzLFxuXHRyZW1vdmVkTW9kdWxlcyxcblx0cHJvbWlzZXMsXG5cdGFwcGx5SGFuZGxlcnMsXG5cdHVwZGF0ZWRNb2R1bGVzTGlzdFxuKSB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0ge307XG5cdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gcmVtb3ZlZENodW5rcztcblx0Y3VycmVudFVwZGF0ZSA9IHJlbW92ZWRNb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcblx0XHRvYmpba2V5XSA9IGZhbHNlO1xuXHRcdHJldHVybiBvYmo7XG5cdH0sIHt9KTtcblx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0Y2h1bmtJZHMuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdGlmIChcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdCkge1xuXHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IGZhbHNlO1xuXHRcdH1cblx0fSk7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXIgPSBmdW5jdGlvbiAoY2h1bmtJZCwgcHJvbWlzZXMpIHtcblx0XHRcdGlmIChcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rcyAmJlxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZUNodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdFx0IWN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF1cblx0XHRcdCkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSk7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yTSA9ICgpID0+IHtcblx0aWYgKHR5cGVvZiBmZXRjaCA9PT0gXCJ1bmRlZmluZWRcIikgdGhyb3cgbmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0OiBuZWVkIGZldGNoIEFQSVwiKTtcblx0cmV0dXJuIGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaG1yRigpKS50aGVuKChyZXNwb25zZSkgPT4ge1xuXHRcdGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSByZXR1cm47IC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcblx0XHRpZighcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB1cGRhdGUgbWFuaWZlc3QgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuXHR9KTtcbn07XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvLyBtb2R1bGUgY2FjaGUgYXJlIHVzZWQgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5MSk7XG4iXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiY29uc3RydWN0b3IiLCJ1cmwiLCJ0aGlzIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidXNlcnMiLCJ5b3VyVXNlciIsIndzIiwiV2ViU29ja2V0IiwiaW5pdCIsImZvcm1BdXRvcml6YXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiY29uc29sZSIsImxvZyIsImV2dCIsIm1lc3NhZ2UiLCJKU09OIiwicGFyc2UiLCJkYXRhIiwidHlwZSIsImFsZXJ0IiwicmVtb3ZlQ2hpbGQiLCJmaXJzdENoaWxkIiwic2hvd0NoYXQiLCJzaG93TWVzc2FnZSIsIndpbmRvdyIsInNlbmQiLCJzdHJpbmdpZnkiLCJ1c2VyIiwiZm9ybSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lckhUTUwiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJlIiwicHJldmVudERlZmF1bHQiLCJ2YWx1ZSIsIm5hbWUiLCJmb3JtQ2hhdCIsImZvcm1Vc2VycyIsImZvckVhY2giLCJ1c2VyRm9ybSIsInRleHRDb250ZW50IiwiY2hhdCIsImNvbnRleHQiLCJ0aW1lIiwiZGF0ZVRvU3RyaW5nIiwiRGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInJlcGxhY2UiLCJhcHBlbmRDaGlsZCIsIm5vcm1hbGl6ZVVybCIsInNyY0J5TW9kdWxlSWQiLCJPYmplY3QiLCJjcmVhdGUiLCJub0RvY3VtZW50IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJub29wIiwidXBkYXRlQ3NzIiwiZWwiLCJocmVmIiwic3BsaXQiLCJpc1VybFJlcXVlc3QiLCJpc0xvYWRlZCIsImluZGV4T2YiLCJ2aXNpdGVkIiwibmV3RWwiLCJjbG9uZU5vZGUiLCJwYXJlbnROb2RlIiwiY29uY2F0Iiwibm93IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJyZWxvYWRBbGwiLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjYWxsIiwidGVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVJZCIsIm9wdGlvbnMiLCJmbiIsInRpbWVvdXQiLCJnZXRTY3JpcHRTcmMiLCJzcmMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGFzdFNjcmlwdFRhZyIsImxlbmd0aCIsImZpbGVNYXAiLCJzcGxpdFJlc3VsdCIsImZpbGVuYW1lIiwibWFwIiwibWFwUnVsZSIsInJlZyIsIlJlZ0V4cCIsImdldEN1cnJlbnRTY3JpcHRVcmwiLCJyZWxvYWRlZCIsImxvYWRlZCIsInJldCIsInNvbWUiLCJnZXRSZWxvYWRVcmwiLCJyZWxvYWRTdHlsZSIsImxvY2FscyIsImpvaW4iLCJzZWxmIiwiYXJncyIsImFyZ3VtZW50cyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJhcHBseSIsInVybFN0cmluZyIsInRyaW0iLCJwcm90b2NvbCIsImNvbXBvbmVudHMiLCJob3N0IiwidG9Mb3dlckNhc2UiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsIml0ZW0iLCJwb3AiLCJwdXNoIiwiY3NzUmVsb2FkIiwiaWQiLCJob3QiLCJkaXNwb3NlIiwiYWNjZXB0IiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImNhY2hlZE1vZHVsZSIsImVycm9yIiwiZXhlY09wdGlvbnMiLCJmYWN0b3J5IiwiX193ZWJwYWNrX21vZHVsZXNfXyIsInJlcXVpcmUiLCJpIiwiaGFuZGxlciIsIm0iLCJjIiwiaHUiLCJjaHVua0lkIiwiaCIsIm1pbmlDc3NGIiwiaG1yRiIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJvIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwibCIsImRvbmUiLCJrZXkiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwicyIsImdldEF0dHJpYnV0ZSIsImNoYXJzZXQiLCJuYyIsInNldEF0dHJpYnV0ZSIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2IiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiZG9uZUZucyIsImJpbmQiLCJ0YXJnZXQiLCJoZWFkIiwiY3VycmVudENoaWxkTW9kdWxlIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJibG9ja2luZ1Byb21pc2VzIiwiYmxvY2tpbmdQcm9taXNlc1dhaXRpbmciLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsInVuYmxvY2siLCJ0aGVuIiwibGlzdCIsImhvdENoZWNrIiwiYXBwbHlPblVwZGF0ZSIsIkVycm9yIiwiaG1yTSIsInVwZGF0ZSIsInVwZGF0ZWRNb2R1bGVzIiwia2V5cyIsImhtckMiLCJwcm9taXNlcyIsInIiLCJpbnRlcm5hbEFwcGx5IiwicmVzb2x2ZSIsImFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzIiwiaG90QXBwbHkiLCJlcnJvcnMiLCJmaWx0ZXIiLCJCb29sZWFuIiwiZGlzcG9zZVByb21pc2UiLCJyZXN1bHQiLCJhcHBseVByb21pc2UiLCJyZXBvcnRFcnJvciIsImVyciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJobXJJIiwiaG1yRCIsIm1lIiwiX21haW4iLCJyZXF1ZXN0IiwiYWN0aXZlIiwicGFyZW50cyIsImNoaWxkcmVuIiwid2FybiIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJkZWZpbmVQcm9wZXJ0eSIsInByb21pc2UiLCJ0cmFja0Jsb2NraW5nUHJvbWlzZSIsImNyZWF0ZVJlcXVpcmUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfYWNjZXB0ZWRFcnJvckhhbmRsZXJzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9yZXF1aXJlU2VsZiIsInNsaWNlIiwiZGVwIiwiY2FsbGJhY2siLCJlcnJvckhhbmRsZXIiLCJkZWNsaW5lIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImlkeCIsInNwbGljZSIsImludmFsaWRhdGUiLCJjaGVjayIsInN0YXR1cyIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwicCIsIm9sZFRhZ3MiLCJuZXdUYWdzIiwiYXBwbHlIYW5kbGVyIiwib2xkVGFnIiwicmVsIiwibWluaUNzcyIsImNodW5rSWRzIiwicmVtb3ZlZENodW5rcyIsInJlbW92ZWRNb2R1bGVzIiwiYXBwbHlIYW5kbGVycyIsInVwZGF0ZWRNb2R1bGVzTGlzdCIsImZ1bGxocmVmIiwiZXhpc3RpbmdMaW5rVGFncyIsImRhdGFIcmVmIiwidGFnIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJmaW5kU3R5bGVzaGVldCIsInJlamVjdCIsImxpbmtUYWciLCJlcnJvclR5cGUiLCJyZWFsSHJlZiIsImNvZGUiLCJjcmVhdGVTdHlsZXNoZWV0IiwiYXMiLCJjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0IiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG1yU19qc29ucCIsIndhaXRpbmdVcGRhdGVSZXNvbHZlcyIsImxvYWRVcGRhdGVDaHVuayIsInJlYWxTcmMiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwicGFyZW50IiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsImYiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImoiLCJvdXRkYXRlZE1vZHVsZUlkIiwiZGVwZW5kZW5jeSIsImRpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwiY2FsbGJhY2tzIiwiZXJyb3JIYW5kbGVycyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiayIsImRlcGVuZGVuY3lJZCIsImVycjIiLCJvbkVycm9yZWQiLCJvcmlnaW5hbEVycm9yIiwiaWdub3JlRXJyb3JlZCIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImpzb25wIiwiZmV0Y2giLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iXSwic291cmNlUm9vdCI6IiJ9